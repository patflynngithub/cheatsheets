
Updated: 4/15/19

VIM Cheatsheet
==============

- :help

- it can operate in two modes: 

     command mode and insert mode. The editor always starts in command mode.
  
  Commands move you through the text, search, replace, mark blocks and perform other editing tasks, and
  some of them switch the editor to insert mode. This means that each key has not one, but likely two 
  meanings: it can either represent a command for the editor when in command mode, or a character that 
  you want in a text when in insert mode.

- Moving through the text is usually possible with the arrow keys.

  If not, try:

                k
            h       l
                j

  SHIFT-G will put the prompt at the end of the document.

- Basic operations

        Esc                         go back to command mode

        dd                          delete current linethe line starting from the current cursor position.
        dw                          delete the word at the right side of the cursor.
        d$                          delete to end of line
        n dd                        delete n lines starting from the current cursor position.
        n dw                        delete n words at the right side of the cursor.
        x                           delete the character on which the cursor is positioned
        :n                          moves to line n of the file.
        :w                          save (write) the file
        :q                          exit the editor.
        :q!                         forces the exit when you want to quit a file containing unsaved changes.
        :wq                         save and exit
        :w                          newfile will save the text to newfile .
        :wq!                        overrides read-only permission (if you have the permission to override permissions, for
                                    instance when you are using the root account.
        /astring                    search the string in the file and position the cursor on the first match below its
                                    position.
        / or n                      perform the same search again, moving the cursor to the next match.
        :1, $s/word/anotherword/g   replace word with anotherword throughout the file.
        yy                          copy a block of text.
        n p                         paste it n times.
        :recover                    recover a file after an unexpected interruption.

        u                           undo
        U                           fix a whole line
        Ctrl-R                      undo the undo's
        :set number                 show line numbers

- Commands that switch the editor to insert mode

    a                               append: it moves the cursor one position to the right before switching to insert mode
    i                               insert before the cursor
    o                               insert a blank line under the current cursor position and move the cursor to that line.

    A                               append to end of line

    Pressing the Esc key switches back to command mode. If you're not sure what mode you're in
    because you use a really old version of vi that doesn't display an “INSERT” message, type Esc and
    you'll be sure to return to command mode. It is possible that the system gives a little alert when you
    are already in command mode when hitting Esc, by beeping or giving a visual bell (a flash on the
    screen). This is normal behavior.

- if vi freezes, the culprit could by Ctrl-s (stops screen output)

    - try Ctrl-q to fix  (restores screen to normal)

------------------------------------------------

NOTE: If you are ever unsure about something you typed, press <ESC> to place
      you in Normal mode.  Then retype the command you wanted.

NOTE: The cursor keys should also work.  But using hjkl you will be able to
      move around much faster, once you get used to it.  Really!

----------------------------------------------

- Many commands that change text are made from an operator and a motion.

  The format for a delete command with the  d  delete operator is as follows:

        d   motion

  Where:
        d      - is the delete operator.
        motion - is what the operator will operate on (listed below).

  A short list of motions:

      w - until the start of the next word, EXCLUDING its first character.
      e - to the end of the current word, INCLUDING the last character.
      $ - to the end of the line, INCLUDING the last character.

  Thus typing  de  will delete from the cursor to the end of the word.

      dw, de, d$

-----------------------------------------------------------------

NOTE:  Pressing just the motion while in Normal mode without an operator will
       move the cursor as specified.

----------------------------------------------------------------

- Typing a number before a motion repeats it that many times.

     2w  move the cursor two words forward.

     3e  move the cursor to the end of the third word forward.

      0  (zero) to move to the start of the line.

- In the combination of the delete operator and a motion mentioned above you
  insert a count before the motion to delete more:

      d   number   motion
    
      e.g.    d2w

- Delete whole line(s)

    dd
    2dd

- Put command

    p        put previously deleted text after the cursor.

        (e.g. last delete was a dd ; the deletion contents where stored in a VIM register)

- Replace command

    rx       replace the character at the cursor with  x

- Change operator

    ce       o change until the end of a word

     c    [number]   motion     (motions: w, $, etc.)

- Cursor location and file status

    CTRL-G      your location in the file and the file status.
         G      move to end of file.
        gg      move to start of file

    NOTE:  You may see the cursor position in the lower right corner of the screen
           This happens when the 'ruler' option is set (see  :help 'ruler'  )



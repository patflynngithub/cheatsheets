Updated: April 13, 2019


BASH command-line environment
-----------------------------

- history

    - !!

        repeat last entered command

    - !xyz

        run the last command beginning with xyz that you typed

    - !xyz:p

        If you need to be very sure of the command you’re targeting, :p can be a huge help. !xyz:p will print the command
        that would be executed rather than executing it. :p is also clever enough to add the printed command to your history
        list as the last command executed (even though it didn’t execute it) so that, if you decide that you like what was printed,
        a !! is all you need to make it happen.

    - !N

        type history, find the number of the command you want and then type !N where "N" is the number of the command
        you’d like to execute. (:p works here too.)

    - ctrl-r ...

         ^r (ctrl-r) followed by whatever you type will search the command history for that string. The bonus here is
         that you’re able to edit the command line you’ve searched for before you send it down the line.

    - !$

        Bang dollar-sign

        !$ is the "end" of the previous command. Consider the following example: We start by looking for a word in a file

            $ grep -i joe /some/long/directory/structure/user-lists/list-15

        if joe is in that userlist, we want to remove him from it. We can either fire up vi with that long directory tree as the argument, or as simply as

            $ vi !$

        Which bash expands to:

            $ vi /some/long/directory/structure/user-lists/list-15

        A word of caution: !$ expands to the end word of the previous command. What’s a word? The bash man page calls a word
        "A sequence of characters considered as a single unit by the shell." If you haven’t changed anything, chances are good
        that a word is a quoted string or a white-space delimited group of characters. What is a white-space delimited group of
        characters ? It’s a group of characters that are separated from other characters by some form of white-space (which could
        be a tab, space, etc.) If you’re in doubt, :p works here too.

        Another thing to keep in mind when using !$ is that if the previous command had no agruments, !$ will expand to the previous
        command rather than the most recent argument. This can be handy if, for example, you forget to type vi and you just type the
        filename. A simple vi !$ and you’re in.

    - !*

        Similar to !$ is !*. !* is all of the arguments to the previous command rather than just the last one. As usual, this is useful
        in many situations. Here’s a simple example:

            $ vi cd /stuff #(oops!)
            [exit vi twice]
            $ !*

        Which bash expands to:

            $ cd /stuff

    - tab-tab

        One of my favorite features of bash is tab-completion. Tab-completion works in a couple of ways, it can complete filenames in the
        current directory or in your $PATH. Like the !commands above, you just need to give bash enough of the filename to make it unique
        and hit the tab key — bash will do the rest for you. Let’s say you have a file in your home directory called ransom.note, consider
        the following:

            $ mor[tab] ran[tab]

        Will expand to

            $ more ransom.note

        Let’s say you also have a file named random in your home directory. ran above is no longer enough to be unique, but you’re in luck. 
        If you hit tab twice, bash will print the list of matching files to the screen so that you can see what you need to add to make your
        shortcut unique.



Updated: April 15, 2019

BASH command-line environment
-----------------------------

- history

    - The history command can be used to list Bash's log of the commands you have typed

    - history n

        This will only list the last n commands.
    - !!

        repeat last entered command

    - !xyz

        run the last command beginning with xyz that you typed

    - !xyz:p

        If you need to be very sure of the command you’re targeting, :p can be a huge help. !xyz:p will print the command
        that would be executed rather than executing it. :p is also clever enough to add the printed command to your history
        list as the last command executed (even though it didn’t execute it) so that, if you decide that you like what was printed,
        a !! is all you need to make it happen.

    - !N

        type history, find the number of the command you want and then type !N where "N" is the number of the command
        you’d like to execute. (:p works here too.)

    - ctrl-r ...

         ^r (ctrl-r) followed by whatever you type will search the command history for that string. The bonus here is
         that you’re able to edit the command line you’ve searched for before you send it down the line.

    - !$

        Bang dollar-sign

        !$ is the "end" of the previous command. Consider the following example: We start by looking for a word in a file

            $ grep -i joe /some/long/directory/structure/user-lists/list-15

        if joe is in that userlist, we want to remove him from it. We can either fire up vi with that long directory tree as the argument, or as simply as

            $ vi !$

        Which bash expands to:

            $ vi /some/long/directory/structure/user-lists/list-15

        A word of caution: !$ expands to the end word of the previous command. What’s a word? The bash man page calls a word
        "A sequence of characters considered as a single unit by the shell." If you haven’t changed anything, chances are good
        that a word is a quoted string or a white-space delimited group of characters. What is a white-space delimited group of
        characters ? It’s a group of characters that are separated from other characters by some form of white-space (which could
        be a tab, space, etc.) If you’re in doubt, :p works here too.

        Another thing to keep in mind when using !$ is that if the previous command had no agruments, !$ will expand to the previous
        command rather than the most recent argument. This can be handy if, for example, you forget to type vi and you just type the
        filename. A simple vi !$ and you’re in.

    - !*

        Similar to !$ is !*. !* is all of the arguments to the previous command rather than just the last one. As usual, this is useful
        in many situations. Here’s a simple example:

            $ vi cd /stuff #(oops!)
            [exit vi twice]
            $ !*

        Which bash expands to:

            $ cd /stuff

    - tab-tab

        One of my favorite features of bash is tab-completion. Tab-completion works in a couple of ways, it can complete filenames in the
        current directory or in your $PATH. Like the !commands above, you just need to give bash enough of the filename to make it unique
        and hit the tab key — bash will do the rest for you. Let’s say you have a file in your home directory called ransom.note, consider
        the following:

            $ mor[tab] ran[tab]

        Will expand to

            $ more ransom.note

        Let’s say you also have a file named random in your home directory. ran above is no longer enough to be unique, but you’re in luck. 
        If you hit tab twice, bash will print the list of matching files to the screen so that you can see what you need to add to make your
        shortcut unique.

- \ (backslash)

        The backslash escape character can be used before a shell command to override any aliases.

        For example if rm was made into an alias for rm −i then typing "rm" would actually run rm −i.
        However, typing \rm lets the shell ignore the alias and just run rm (its runs exactly what you type),
        this way it won't confirm if you want to delete things.

        The "\" character can be used before special characters (such as a space or a wildcard), to stop bash
        from trying to expand them.

- script

    The "script" command creates a typescript, or "capture log" of a shell session − it writes a copy of
    your session to a file, including commands you type and their output.

~ (tilde character)

    The tilde character is used as an alias to a users home directory.

    For example, if your user−name was "fred", instead of typing cd /home/fred you could simply type cd
    ~. Or to get to fred's tmp directory (under his home directory) you could type cd ~/tmp.

    Home directory shortcut

        ~ (tilde) can also be used as a shortcut to other users home directories, simply type:
        ~user_name and it will take you to the users home directory. Note that you need to
        spell the username exactly correct, no wildcards.
- reset

    The reset command re−initializes your current terminal. This can be useful when the text from your
    terminal becomes garbled, simply type "reset" and this will fix your terminal.

- echo

    A little command that repeats anything you type.

    Example:

        echo "hello world"

    Example:

        echo rm −R *
    
        This will output what will be passed to the rm command (and therefore what would be deleted),
        putting echo before a command renders it harmless (it just expands wildcards so you know what it
        will do).

        Using echo to prevent accidents

            Typing: echo command(s) could save you the trouble of accidentally doing something
            you didn't expect.

            Using echo allows you to expand the wildcards to understand what will happen before
            you actually run the command.

    Also try using the −e option with echo. This will allow you to use the escape character sequences to
    format the output of a line. Such as '\t' for tab, '\n' for newline etc.

- keystrokes / shortcuts

    CTRL-L
    
        the terminal can be cleared using the Ctrl+L key combination

    CTRL−D

        - the "end−of−file" (EOF) key combination can be used to quickly log out of any terminal. CTRL−D is
         also used in programs such as "at" to signal that you have finished typing your commands (the EOF
         command).

    CTRL−Z

        - this key combination is used to stop a process. It can be used to put something in the background
          temporarily.

    CTRL−A and CTRL−E

        These key combinations are used for going to the start and end of the line on the command line. Use

        CTRL−A to jump to the start of the line
        CTRL−E to jump to the end of the line.
        
    CTRL−K

        This key combination can be used to cut or delete what is currently in front of the cursor.

    CTRL−Y

        This key combination can be used to paste the last thing you deleted (using CTRL−K or CTRL−W ).

    CTRL−W

        This key combination can be used to cut or delete the entire line that has being typed.

- whatis

    Displays a one−line description of what a program does. The string needs to be an exact match,
    otherwise whatis won't output anything. Relies on the whatis database (see below).

- apropos

    Searches the whatis database for strings, similar to whatis except it finds and prints anything matching
    the string (or any part of the string). Also relies on the whatis database (see above).

- Standard error

    Standard error is error output from programs. This output is also sent to the screen and will normally
    be seen mixed in with standard output. The difference between standard output and standard error is
    that standard error is unbuffered (it appears immediately on the screen) and standard error is only
    printed when something goes wrong (it will give you details of what went wrong).

- <<

    The << symbol is sometimes used with commands that use standard input to take information. You
    simply type << word (where word can be any string) at the end of the command. However its main
    use is in shell scripting.

    The command takes your input until you type "word", which causes the command to terminate and
    process the input.

    Using << is similar to using CTRL−D (EOF key), except it uses a string to perform the end−of−file
    function. This design allows it to be used in shell scripts.

    For example type "cat" (with no options...) and it will work on standard input.
    To stop entering standard input you would normally hit CTRL−D .
    As an alternative you can type "cat << FINISHED", then type what you want.

    When you are finished, instead of hitting CTRL−D you could type "FINISHED" and it will end (the
    word FINISHED will not be recorded).

- tee

    Sends output of a program to a file and to standard output. Think of it as a T intersection...it goes two
    ways.

        ls /home/user | tee my_directories.txt
    
    Lists the files (displays the output on the screen) and sends the output to a file: "my_directories.txt".

- &>

    Redirects standard output and error output to a specific location.

    For example:

        make &> /dev/null

    Sends both error output and standard output to /dev/null so you won't see anything...

- cd −

    will return you to the previous directory (a bit like an "undo").

- tree

    Outputs an ASCII text tree/graph starting at a given directory (by default the current directory). This
    command recursively lists all files and all directories.

- find

    find is a tool which looks for files on a filesystem. find has a large number of options which can be
    used to customise the search (refer to the manual/info pages).

    Note that find works with standard wildcards,Section 20.4.1, and can work with regular expressions,

    Basic example:

        find / −name file

    This would look for a file named "file" and start at the root directory (it will search all directories
    including those that are mounted filesystems).

    The `−name' option is case sensitive you can use the `−iname' option to find something regardless of
    case.

    Use the '−regex' and '−iregex' to find something according to a regular expression (either case
    sensitive or case insensitive respectively).

    The '−exec' option is one of the more advanced find operations. It executes a command on the files it
    finds (such as moving or removing it or anything else...).

    To use the −exec option: use find to find something, then add the −exec option to the end, then:
    (1) command_to_be_executed then (2) '{}' (curly brackets) then the arguments then (3) ending semicolon

    (1) This is the tool you want to execute on the files find locates. For example if you wanted to
    remove everything it finds then you would use −exec rm −f

    (2) The curly brackets are used in find to represent the current file which has been found. ie. If it
        found the file shopping.doc then {} would be substituted with shopping.doc. It would then
        continue to substitute {} for each file it finds. The brackets are normally protected by
        backslashes (\) or single−quotation marks ('), to stop bash expanding them (trying to interpret
        them as a special command eg. a wildcard).

    (3) This is the symbol used by find to signal the end of the commands. It's usually protected by a
        backslash (\) or quotes to stop bash from trying to expand it.

        find / −name '*.doc' −exec cp '{}' /tmp/ ';'

    The above command would find any files with the extension '.doc' and copy them to your /tmp
    directory, obviously this command is quite useless, it's just an example of what find can do. Note that
    the quotation marks are there to stop bash from trying to interpret the other characters as something.

    Excluding particular folders with find can be quite confusing, but it may be necessary if you want to
    search your main disk (without searching every mounted filesystem). Use the −path option to exclude
    the particular folder (note, you cannot have a '/' (forward slash) on the end) and the −prune option to
    exclude the subdirectories. An example is below:

        find / −path '/mnt/win_c' −prune −o −name "string" −print

    This example will search your entire directory tree (everything that is mounted under it) excluding
    /mnt/win_c and all of the subdirectories under /mnt/win_c. When using the −path option you can use
    wildcards.

    Note that you could add more −path '/directory' statements on if you wanted.
    find has many, many different options, refer to the manual (and info) page for more details.

- slocate

    slocate outputs a list of all files on the system that match the pattern, giving their full path name (it
    doesn't have to be an exact match, anything which contains the word is shown).

    Replaces locate
    Secure locate is a replacement for locate, both have identical syntax. On most
    distributions locate is an alias to slocate.

    Commmand syntax:  slocate string

    This won't work unless
    You need to run either updatedb (as root) or slocate −u (as root) for slocate to work.

    locate uses a prebuilt database, which should be regularly updated, while find iterates over a filesystem
    to locate files. Thus, locate is much faster than find , but can be inaccurate if the database -can be seen
    as a cache- is not updated (see updatedb command).

- whereis

    whereis locates the binary, source, and manual page for a particular program, it uses exact matches
    only, if you only know part of the name use slocate.

    Command syntax:  whereis program_name

- which

    Virtually the same as whereis, except it only finds the executable (the physical program). It only looks
    in the PATH (environment variable) of a users shell.

    Use the −a option to list all occurances of the particular program_name in your path (so if theres
    more than one you can see it).

    Command syntax:  which program_name

- ln

    Create a link to a file. There are two types of links:

    Hard links

        Hard links are considered pointers to a file (the number is listed by typing ls −l). Each
        hard−link is a reference to a file.

        Target and link files have same inode #

        The file itself only goes away when all hard−links are deleted. If you delete the original file
        and there are hard links to it the original file will remain.

        Example:  ln target_name link_name

        Will create a "hard link" to target_name called link_name, you need to delete both of these to
        remove the file.

        When you delete a file it removes one link to the underlying inode. The inode is only deleted 
        (or deletable/over-writable) when all links to the inode have been deleted.

        Once a hard link has been made the link is to the inode. deleting renaming or moving the original file
        will not affect the hard link as it links to the underlying inode. Any changes to the data on the inode
        is reflected in all files that refer to that inode.

    Symbolic links

        Symbolic links are created by typing "ln −s". When you remove the original file the symbolic
        link becomes broken, a symbolic link is similar to a windows "short−cut".

        The advantage of symbolic links is that the target can be to something on another file−system,
        while hard−links can only exist on the same file−system.

        For example:  ln −s target_name link_name

        This creates a symbolic link to "target_name" called "link_name", if you delete the original
        file the symbolic link won't work (it becomes a broken link).

        Soft links is a special kind of file that points to another file, much like a shortcut. Unlike a hard link,
        a symbolic link does not contain the data in the target file. It simply points to another entry somewhere in
        the file system. This difference gives symbolic links certain qualities that hard links do not have, such as
        the ability to link to directories, or to files on remote computers networked through NFS. Also, when you
        delete a target file, symbolic links to that file become unusable, whereas hard links preserve the content
        s of the file.

- du

    Displays information about file size. Use du filename to display the size of a particular file. If you use
    it on directories it will display the information on the size of the files in the directory and each
    subdirectory.

    Options for du (use du −option(s)):
        ◊ −c −− this will make du print a grand total after all arguments have being processed.
        ◊ −s −− summarises for each argument (prints the total).
        ◊ −h −− prints things in " human readable" mode; for example printing 1M (megabyte) rather
                than 1,024,000 (bytes).

    Using the −hs options on a directory will display the total size of the directory and all subdirectories.

    Command syntax:   du −options file_directory_or_files

    Example:     du −hs *

    This command will list the size of all files in the current directory and it will list the size of
    subdirectories, it will list things in human−readable sizes using 1024 Kb is a Megabyte, M for
    megabyte, K for kilobyte etc.

- file

    Attempts to find out what type of file it is, for example it may say it's: binary, an image file (well it
    will say jpeg, bmp et cetera), ASCII text, C header file and many other kinds of files, it's a very useful
    utility.

    Command syntax:  file file_name

- stat

    Tells you detailed information about a file, including inode number creation/access date. Also has
    many advanced options and uses.

    For simple use type:  stat file

- split

    Splits files into several smaller files.

    Use the −b xx option to split into xx bytes, also try −k for kilobytes, and −m for megabytes. You can
    use it to split text files and any other files... you can use cat to re−combine the files.

    This may be useful if you have to transfer something to floppy disks or you wish to divide text files
    into certain sizes.

    Command syntax:  split −options file

    This will split the input file into 1000 lines of input each (thats the default...), and output (using the
    above example), with the input name file, "fileaa" (1st part of file), "fileab" (2nd part of file), "fileac"
    (3rd part of file) etc. until the there is no more of the file left to split.

- Mass Rename/copy/link Tools

    - see GNU/Linux Command−Line Tools Summary

- who

    Displays information on which users are logged into the system including the time they logged in.

- w

    Displays information on who is logged into the system and what they are doing (ie. the processes they
    are running). It's similar to who but displays slightly different information.

- users

    Very similar to who except it only prints out the user names who are currently logged in. (Doesn't
    need or take any options).

- last

    Displays records of when various users have logged in or out. This includes information on when the
    computer was rebooted

- xargs

    Note that xargs is an advanced, confusing, yet powerful command. xargs is a command used to run
    other commands as many times as necessary, this way it prevents any kind of overload... When you
    run a command then add a "| xargs command2". The results of command1 will be passed to
    command2, possibly on a line−by−line basis or something similar.

- CTRL−C

    The break key, will kill (break, stop) something that's running on your terminal.

- jobs

    Prints currently running jobs, as in processes you have executed within the shell.
- bg

    Backgrounds a process. To start a program in the background (so it doesn't take over the terminal) use
    an "&" (ampersand) sign at the end of the command. You usually use CTRL−Z to suspend something
    you are currently using. You can simply use bg to resume in the background the last job suspended...

- fg
    Bring a process to the foreground, so you can interact with it. The process will use your current
    terminal. Note simply use fg to foreground the last job number suspended.

- chsh

    Used to change your login shell.

    To list the shells available type:

        chsh −−list−shells

- wc

    Word count, count how many words you have in a text document. Can also be used to count the lines
    or bytes within the file.

    Use the options −w for words, −l for lines and −c for bytes. Or simply run wc with no options to get
    all three.

- cmp

    Determines whether or not two files differ, works on any type of file. Very similar to diff only it
    compares on the binary level instead of just the text.

- diff

    Compares two text files and output a difference report (sometimes called a "diff") containing the text
    that differs between two files.

    Can be used to create a 'patch' file (which can be used by patch).

    Example:  diff file1.txt file2.txt
    
    diff will output a '>' (followed by the line) for each line that isn't in the first file but is in the second
    file, and it will output a '<' (followed by the line) for each line that is in the first file but not in the
    second file.

- sdiff
    Instead of giving a difference report, it outputs the files in two columns, side by side, separated by
    spaces.
- diff3
    Same as diff except for three files.

- comm

    Compares two files, line−by−line and prints lines that are unique to file1 (1st column), unique to file2
    (2nd column) and common to both files (3rd column).

    Use comm with the −1, −2, or −3 to suppress the printing of those particular lines. Simply run comm
    to have all three listed (ie. unique to files 1 and 2 and common to both).

- end of line

    on a Windows text file, a newline is signalled by a carriage
    return followed by a newline, '\r\n' in ASCII.

    On a UNIX system a newline is simply a newline, '\n' in ASCII.

- Standard Wildcards (globbing patterns)

    Standard wildcards (also known as globbing patterns) are used by various command−line utilities to work
    with multiple files. For more information on standard wildcards (globbing patterns) refer to the manual page
    by typing:

        man 7 glob

    Standard wildcards are used by nearly any command (including mv, cp, rm and many others).

    ? (question mark)

        this can represent any single character. If you specified something at the command line like "hd?"
        GNU/Linux would look for hda, hdb, hdc and every other letter/number between a−z, 0−9.

    * (asterisk)

        this can represent any number of characters (including zero, in other words, zero or more characters).
        If you specified a "cd*" it would use "cda", "cdrom", "cdrecord" and anything that starts with "cd"
        also including "cd" itself. "m*l" could by mill, mull, ml, and anything that starts with an m and ends
        with an l.

    [ ] (square brackets)

        specifies a range. If you did m[a,o,u]m it can become: mam, mum, mom if you did: m[a−d]m it can
        become anything that starts and ends with m and has any character a to d inbetween. For example,
        these would work: mam, mbm, mcm, mdm. This kind of wildcard specifies an "or" relationship (you
        only need one to match).

    { } (curly brackets)

        terms are separated by commas and each term must be the name of something or a wildcard. This
        wildcard will copy anything that matches either wildcard(s), or exact name(s) (an "or" relationship,
        one or the other).

        For example, this would be valid:

            cp {*.doc,*.pdf} ~

        This will copy anything ending with .doc or .pdf to the users home directory. Note that spaces are not
        allowed after the commas (or anywhere else).

    [!]

        This construct is similar to the [ ] construct, except rather than matching any characters inside the
        brackets, it'll match any character, as long as it is not listed between the [ and ]. This is a logical NOT.
        For example rm myfile[!9] will remove all myfiles* (ie. myfiles1, myfiles2 etc) but won't remove a
        file with the number 9 anywhere within it's name.

    \ (backslash)

        is used as an "escape" character, i.e. to protect a subsequent special character. Thus, "\\" searches for a
        backslash. Note you may need to use quotation marks and backslash(es).

        Key or key combination      Function
        ----------------------      --------
        Ctrl+A                      Move cursor to the beginning of the command line.
        Ctrl+C                      End a running program and return the prompt, see Chapter 4, Processes.
        Ctrl+D                      Log out of the current shell session, equal to typing exit or logout.
        Ctrl+E                      Move cursor to the end of the command line.
        Ctrl+H                      Generate backspace character.
        Ctrl+L                      Clear this terminal.
        Ctrl+R                      Search command history
        Ctrl+Z                      Suspend a program
        ArrowLeft and               Move the cursor one place to the left or right on the command line, so that you
        ArrowRight                  can insert characters at other places than just at the beginning and the end.
        ArrowUp and                 Browse history. Go to the line that you want to repeat, edit details if necessary,
        ArrowDown                   and press Enter to save time.
        Shift+PageUp and            Browse terminal buffer (to see text that has "scrolled off" the screen).
        Shift+PageDown
        Tab                         Command or filename completion; when multiple choices are possible, the
                                    system will either signal with an audio or visual bell, or, if too many choices are
                                    possible, ask you if you want to see them all.
        Tab Tab                     Shows file or command completion possibilities.

        The last two items in the above table may need some extra explanations. For instance, if you want
        to change into the directory directory_with_a_very_long_name , you are not going to type that very
        long name, no. You just type on the command line cd dir, then you press Tab and the shell
        completes the name for you, if no other files are starting with the same three characters. Of course,
        if there are no other items starting with “d”, then you might just as wel type cd d and then Tab. If
        more than one file starts with the same characters, the shell will signal this to you, upon which you
        can hit Tab twice with short interval, and the shell presents the choices you have:

- man / info / help

    - man

        - man man

        The first line contains the name of the command you are reading about, and the id of the
        section in which this man page is located. The man pages are ordered in chapters.
        Commands are likely to have multiple man pages, for example the man page from the user
        section, the man page from the system admin section, and the man page from the
        programmer section.

        By default, the man page with the lowest number is shown. If
        you want to see another section than the default, specify it after the man command:

            man 5 passwd

        If you want to see all man pages about a command, one after the other, use the -a to man:

            man -a passwd

        This way, when you reach the end of the first man page and press SPACE again, the man page
        from the next section will be displayed.

        A reference to other man pages is given in the “SEE ALSO” section. In between parentheses
        is the number of the man page section in which to find this command. Experienced users
        often switch to the “SEE ALSO” part using the / command followed by the search string SEE
        and press Enter.

    - info

        In addition to the man pages, you can read the Info pages about a command, using the info
        command. These usually contain more recent information and are somewhat easier to use. The
        man pages for some commands refer to the Info pages.

    - "--help"

 - Linux structure

    “On a UNIX system, everything is a file; if something is not a file, it is a process.”

    This statement is true because there are special files that are more than just files (named pipes
    and sockets, for instance), but to keep things simple, saying that everything is a file is an
    acceptable generalization. A Linux system, just like UNIX, makes no difference between a file and
    a directory, since a directory is just a file containing names of other files. Programs, services, texts,
    images, and so forth, are all files. Input and output devices, and generally all devices, are
    considered to be files, according to the system.

    - File typeS

        Symbol   Meaning
        ------   -------
        -        Regular file
        d        Directory
        l        Link
        c        Special file
        s        Socket
        p        Named pipe
        b        Block device


    - partitions

        There are two kinds of major partitions on a Linux system:

            data partition: normal Linux system data, including the root partition containing all the data to
            start up and run the system; and

            swap partition: expansion of the computer's physical memory, extra memory on hard disk.

        Most systems contain a root partition, one or more data partitions and one or more swap partitions.
        Systems in mixed environments may contain partitions for other system data, such as a partition
        with a FAT or VFAT file system for MS Windows data.

        The standard root partition (indicated with a single forward slash, /) is about 100-500 MB, and
        contains the system configuration files, most basic commands and server programs, system
        libraries, some temporary space and the home directory of the administrative user. A standard
        installation requires about 250 MB for the root partition.

        Read the software documentation for specific guidelines. Some applications, such as databases,
        might require more swap space. Others, such as some handheld systems, might not have any
        swap at all by lack of a hard disk. Swap space may also depend on your kernel version.

        The kernel is on a separate partition as well in many distributions, because it is the most important
        file of your system. If this is the case, you will find that you also have a /boot partition, holding your
        kernel(s) and accompanying data files.

        The rest of the hard disk(s) is generally divided in data partitions, although it may be that all of the
        non-system critical data resides on one partition, for example when you perform a standard
        workstation installation. When non-critical data is separated on different partitions, it usually
        happens following a set pattern:

            a partition for user programs (/usr)
            a partition containing the users' personal data (/home)
            a partition to store temporary data like print- and mail-queues (/var)
            a partition for third party and extra software (/opt)

        Every partition has its own set of inodes; throughout a system with multiple partitions, files with the
        same inode number can exist.

        - swap partitions

            Linux generally counts on having twice the amount of physical memory in the form of swap space
            on the hard disk. When installing a system, you have to know how you are going to do this.

            An example on a system with 512 MB of RAM:

                1st possibility: one swap partition of 1 GB
                2nd possibility: two swap partitions of 512 MB
                3rd possibility: with two hard disks: 1 partition of 512 MB on each disk.

            The last option will give the best results when a lot of I/O is to be expected.

            Read the software documentation for specific guidelines. Some applications, such as databases,
            might require more swap space. Others, such as some handheld systems, might not have any
            swap at all by lack of a hard disk. Swap space may also depend on your kernel version.

- PATH

    echo $PATH
    /home/jumper/bin:/usr/local/bin:/usr/local/sbin:/usr/X11R6/bin:\
    /usr/bin:/usr/sbin:/bin:/sbin
    
    export PATH=/usr/local/bin:/usr/local/sbin:/usr/X11R6/bin:\
        /usr/bin:/usr/sbin:/bin:/sbin:/home/jumper/bin

    - augment path

        export PATH="$PATH:/Applications/SublimeText/Contents/SharedSupport/bin/"

- chmod

    - change file permissions

- Redirection

    - Redirecting “nothing” to an existing file is equal to emptying the file:

        nancy:~> ls -l list
        -rw-rw-r--   1 nancy   nancy   117 Apr 2 18:09 list
        nancy:~> > list
        nancy:~> ls -l list

    if the file descriptor number is omitted, and the first character of the
    redirection operator is <, the redirection refers to the standard input (file descriptor 0). If the first
    character of the redirection operator is >, the redirection refers to the standard output (file descriptor 1).

    The ampersand here is not used to run a process in the background. Here, it merely serves as an indication that
    the number that follows is not a file name, but rather a location that the data stream is pointed to.

    If your process generates a lot of errors, this is a way to thoroughly examine them:
    
        command 2>&1 | less

    Separating standard output from standard error

        Constructs like these are often used by programmers, so that output is displayed in one terminal
        window, and errors in another. Find out which pseudo terminal you are using issuing the tty
        command first:

            andy:~/newsoft> make all 2> /dev/pts/7

- tee

    Writing to output and files simultaneously

    You can use the tee command to copy input to standard output and one or more output files in one
    move. Using the -a option to tee results in appending input to the file(s). This command is useful if
    you want to both see and save output. The > and >> operators do not allow to perform both actions
    simultaneously.

    This tool is usually called on through a pipe (|), as demonstrated in the example below:

        mireille ~/test> date | tee file1 file2
        Thu Jun 10 11:10:34 CEST 2004
        mireille ~/test> cat file1
        Thu Jun 10 11:10:34 CEST 2004
        mireille ~/test> cat file2
        Thu Jun 10 11:10:34 CEST 2004

        mireille ~/test> uptime | tee -a file2
        11:10:51 up 21 days, 21:21, 57 users, load average: 0.04, 0.16, 0.26
        mireille ~/test> cat file2
        Thu Jun 10 11:10:34 CEST 2004
        11:10:51 up 21 days, 21:21, 57 users, load average: 0.04, 0.16, 0.26

- filters

    When a program performs operations on input and writes the result to the standard output, it is
    called a filter. One of the most common uses of filters is to restructure output.

    - grep
    - sort
    - uniq

- truncating a file

    andy:~>  > placeholder

- tools that work on compressed files, by uncompressing them only in memory.

    The actual compressed file stays on your disk as it is. Most systems support zgrep, zcat, bzless and
    other members of the z-family to prevent unnecessary decompressing/compressing actions. See
    your system's binary directory and the Info pages.

- MANPATH 

    Variable that tells the man command where to look for compressed man pages.

    If new software is added to the system in new or unusual directories, the
    documentation for it will probably also be in an unusual directory. If you want to read the man pages
    for the new software, extend the MANPATH variable:      

        export MANPATH=$MANPATH:/opt/FlightGear/man

- LD_LIBRARY_PATH

    paths to search for libraries

- When logging into an interactive login shell, login will do the authentication, set the environment
  and start your shell. 

  In the case of bash, the next step is reading the general profile from /etc , if
  that file exists. bash then looks for ~/.bash_profile , ~/.bash_login and ~/.profile , in that order,
  and reads and executes commands from the first one that exists and is readable. If none exists,
  /etc/bashrc is applied.


When a login shell exits, bash reads and executes commands from the file ~/.bash_logout , if it
exists.
